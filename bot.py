from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import logging
import config
import os

logging.basicConfig(level=logging.INFO)

bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher(bot)

# –ö–ª—é—á -> –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
files = {
    "video1": "files/video1.mp4",
    "book": "files/book.pdf"
}

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    param = message.get_args()  # –ü–æ–ª—É—á–∞–µ–º deep link –ø–∞—Ä–∞–º–µ—Ç—Ä
    if not param:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª, –∏—Å–ø–æ–ª—å–∑—É–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    member = await bot.get_chat_member(config.CHANNEL_ID, message.from_user.id)
    if member.status in ("member", "administrator", "creator"):
        file_path = files.get(param)
        if file_path and os.path.exists(file_path):
            await message.answer_document(open(file_path, "rb"))
        else:
            await message.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        kb = InlineKeyboardMarkup().add(
            InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=config.CHANNEL_LINK),
            InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f"check_{param}")
        )
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, –ø–æ—Ç–æ–º –Ω–∞–∂–º–∏ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'.", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("check_"))
async def check_subscription(callback: types.CallbackQuery):
    param = callback.data.split("_", 1)[1]
    member = await bot.get_chat_member(config.CHANNEL_ID, callback.from_user.id)
    if member.status in ("member", "administrator", "creator"):
        file_path = files.get(param)
        if file_path and os.path.exists(file_path):
            await bot.send_document(callback.from_user.id, open(file_path, "rb"))
        else:
            await callback.message.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        await callback.answer("‚ùå –¢—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω!", show_alert=True)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
